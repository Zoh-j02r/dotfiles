#!/bin/sh

# Name of color variables
c=("bl" "rd" "gr" "yw" "bu" "lg" "cy" "wh")
# Name of misc colors variables
m=("bg_0" "bg_1" "bg_2" "bg_3" "hg_c" "fg_0" "fg_1" "fg_2")
# This is the main palette of the system
# High-bright palette                                                      
h=("#221B36" "#FF427C" "#69FF47" "#FFE722" "#42AED5" "#C1FE00" "#10E080" "#F9F9F9")
# Low-bright palette                                           
l=("#0C0E15" "#B30039" "#44D62C" "#E69200" "#1060AE" "#96C300" "#32ED4F" "#6C7D9C")
# Misc palette
b=("#0E0B16" "#171322" "#211C2E" "#322C45" "#120033" "#B3C4E0" "#455574" "#6E8EC3") 


files=("sway/config" "yambar/config.yml" "zathura/zathurarc" "nvim/lua/core/coloring/palette.lua" "imv/config" "swaynag/config" "swaylock/config" "foot/foot.ini")

program=("sway" "yambar" "zathura" "nvim" "imv" "swaynag" "swaylock" "foot")
	# MISSING: nvim, luakit, cmus, armcord

# Sets programs that uses hex-code instead of hex-color 
no_hex=("yambar" "imv" "foot" "swaynag" "swaylock")
# Set programs where setting alpha channel is not obligatory
no_alpha=("imv" "foot" "swaynag" "swaylock")

set_color_type() {
	# SOLVE: change function for a smaller option
	if [[ " ${no_hex[*]} " =~ " $1 " ]]; then
		color=false
	else
		color=true
	fi
	
	if [[ " ${no_alpha[*]} " =~ " $1 " ]]; then
		alpha=""
	else
		alpha="FF"
	fi
}

for p in "${!program[@]}"; do
	set_color_type "${program[$p]}"
# SOLVE: add a feedback text to changes being made
	case $1 in
		"revert")
			for i in "${!c[@]}"; do
				if $color ; then
	# SOLVE: add a way to declare a variable inside substring expansion
					printf "%s" "s/${l[$i]}/${c[$i]}_l/;" 
					printf "%s" "s/${h[$i]}/${c[$i]}_h/;" 
					printf "%s" "s/${b[$i]}/${m[$i]}/;"
				else
					printf "%s" "s/${l[$i]:1}$alpha/${c[$i]}_l/;" 
					printf "%s" "s/${h[$i]:1}$alpha/${c[$i]}_h/;" 
					printf "%s" "s/${b[$i]:1}$alpha/${m[$i]}/;"
				fi
			done
		;;
		"apply")
			for i in "${!c[@]}"; do
				if $color ; then
					printf "%s" "s/${c[$i]}_l/${l[$i]}/;" 
					printf "%s" "s/${c[$i]}_h/${h[$i]}/;" 
					printf "%s" "s/${m[$i]}/${b[$i]}/;"
				else
					printf "%s" "s/${c[$i]}_l/${l[$i]:1}$alpha/;" 
					printf "%s" "s/${c[$i]}_h/${h[$i]:1}$alpha/;" 
					printf "%s" "s/${m[$i]}/${b[$i]:1}$alpha/;"
				fi
			done
		;;
		*)
	# SOLVE: add errors using signals
			break
		;;
	esac | { read -r var; sed -e ${var%?} -i "${files[$p]}"; } 
done 
